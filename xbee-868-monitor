#!/usr/bin/env python

import errno
import logging
import os
import select
import socket
import struct
import time

import psys.poll
from psys import eintr_retry
from psys import bytes, str

from xbee_868 import constants
from xbee_868.core import Error, LogicalError



import xbee_868.log
import xbee_868.sensor
from xbee_868.io_loop import IOLoop, AcceptingSocket, SocketBase


# TODO
LOG = logging.getLogger(__name__)


# TODO: handle connection lost

# fcntl.fcntl(self.fd, FCNTL.F_SETFL, os.O_NONBLOCK)


class ClientConnection(SocketBase):
    def __init__(self, io_loop, sock):
        super(ClientConnection, self).__init__(io_loop, sock)
        self._write_buffer = bytearray(struct.pack("!Q", 7) + b"{\"a\":3}")


    # TODO TIMEOUT
    def on_write(self):
        """Called when we are able to write."""

        if self._write():
            self.close()


    def poll_write(self):
        """Returns True if we need to poll the file for write availability."""

        return True


class ServerSocket(AcceptingSocket):
    def __init__(self, io_loop):
        sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        # TODO
        os.unlink(constants.SERVER_SOCKET_PATH)
        sock.bind(constants.SERVER_SOCKET_PATH)
        # TODO
        sock.listen(100)
        super(ServerSocket, self).__init__(io_loop, sock)
    def connection_accepted(self, sock, addr):
        ClientConnection(self.io_loop, sock)


class MainLoop(IOLoop):
    def __init__(self):
        super(MainLoop, self).__init__()
        self.__sensors = {}
        ServerSocket(self)
        self.call(self.__connect_to_sensors)



    def __connect_to_sensors(self):
        try:
            pass
            #xbee_868.sensor.connect(self)
        finally:
            self.call_after(5, self.__connect_to_sensors)


xbee_868.log.setup(debug_mode=True)
LOG.info("Staring the daemon...")

io_loop = MainLoop()
#connect(io_loop)
io_loop.start(precision=-1)
#poll = psys.poll.Poll()
#poll.register(sensor.fileno(), poll.POLLIN)

#try:
#    while True:
#        for fd, epoll_flags in poll.poll():
#            sensor.on_read()
#finally:
#    poll.close()
